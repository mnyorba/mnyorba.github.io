---
import { string } from "astro/zod";

const { headings } = Astro.props;
{
	depth: Number;
	slug: string;
	text: string;
}
---

<aside
	id="#toc"
	class="col-start-1 md:col-start-8 lg:col-start-9 xl:col-start-10 col-end-13 order-1 md:order-2 px-2"
>
	<div id="toc" class="sticky top-0">
		<h2 class="mt-0 pl-5">Зміст</h2>
		<ul class="menu menu-vertical px-1">
			{
				headings.map(({ depth, slug, text }) => (
					<li class="my-0">
						<a
							aria-current={Astro.url.pathname === slug}
							class:list={[
								"link no-underline",
								{
									active:
										Astro.url.pathname === slug ||
										(slug !== "/" &&
											Astro.url.pathname.startsWith(
												slug,
											)),
								},
								{ "pl-1": depth === 1 },
								{ "pl-3": depth === 2 },
								{ "pl-4": depth === 3 },
								{ "pl-5": depth === 4 },
							]}
							href={"#" + slug}
						>
							{text}
						</a>
					</li>
				))
			}
		</ul>
	</div>
</aside>

<script>
	const setCurrent: IntersectionObserverCallback = (entries) => {
		// loop to each entries (headings) in the page
		for (let entry of entries) {
			// equivalent to the slug returned from pageHeadings
			const { id } = entry.target;
			// get the TOC link's element for the current entry
			const tocLinkEl = document.querySelector(`#toc a[href='#${id}']`);
			if (!tocLinkEl) return;

			// check if the entry is intersecting
			if (entry.isIntersecting) {
				// remove active class from all links
				document
					.querySelectorAll("#toc a")
					.forEach((e) => e.classList.remove("active"));
				// add active class to the currently active entry
				tocLinkEl.classList.add("active");
			}
		}
	};

	const observerOption: IntersectionObserverInit = {
		rootMargin: "0px 0px -66%",
		threshold: 1,
	};
	const headingObserver = new IntersectionObserver(
		setCurrent,
		observerOption,
	);
	document
		.querySelectorAll("article :is(h2,h3,h4)")
		.forEach((heading) => headingObserver.observe(heading));
</script>
